// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cash

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CashServiceClient is the client API for CashService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CashServiceClient interface {
	PostNewCash(ctx context.Context, in *PostCash, opts ...grpc.CallOption) (*Cash, error)
	GetListOfCashe(ctx context.Context, in *Identificator, opts ...grpc.CallOption) (*ListOfCashe, error)
}

type cashServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCashServiceClient(cc grpc.ClientConnInterface) CashServiceClient {
	return &cashServiceClient{cc}
}

func (c *cashServiceClient) PostNewCash(ctx context.Context, in *PostCash, opts ...grpc.CallOption) (*Cash, error) {
	out := new(Cash)
	err := c.cc.Invoke(ctx, "/cash.CashService/PostNewCash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashServiceClient) GetListOfCashe(ctx context.Context, in *Identificator, opts ...grpc.CallOption) (*ListOfCashe, error) {
	out := new(ListOfCashe)
	err := c.cc.Invoke(ctx, "/cash.CashService/GetListOfCashe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CashServiceServer is the server API for CashService service.
// All implementations must embed UnimplementedCashServiceServer
// for forward compatibility
type CashServiceServer interface {
	PostNewCash(context.Context, *PostCash) (*Cash, error)
	GetListOfCashe(context.Context, *Identificator) (*ListOfCashe, error)
	mustEmbedUnimplementedCashServiceServer()
}

// UnimplementedCashServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCashServiceServer struct {
}

func (UnimplementedCashServiceServer) PostNewCash(context.Context, *PostCash) (*Cash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostNewCash not implemented")
}
func (UnimplementedCashServiceServer) GetListOfCashe(context.Context, *Identificator) (*ListOfCashe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListOfCashe not implemented")
}
func (UnimplementedCashServiceServer) mustEmbedUnimplementedCashServiceServer() {}

// UnsafeCashServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CashServiceServer will
// result in compilation errors.
type UnsafeCashServiceServer interface {
	mustEmbedUnimplementedCashServiceServer()
}

func RegisterCashServiceServer(s grpc.ServiceRegistrar, srv CashServiceServer) {
	s.RegisterService(&CashService_ServiceDesc, srv)
}

func _CashService_PostNewCash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashServiceServer).PostNewCash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cash.CashService/PostNewCash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashServiceServer).PostNewCash(ctx, req.(*PostCash))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashService_GetListOfCashe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identificator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashServiceServer).GetListOfCashe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cash.CashService/GetListOfCashe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashServiceServer).GetListOfCashe(ctx, req.(*Identificator))
	}
	return interceptor(ctx, in, info, handler)
}

// CashService_ServiceDesc is the grpc.ServiceDesc for CashService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CashService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cash.CashService",
	HandlerType: (*CashServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostNewCash",
			Handler:    _CashService_PostNewCash_Handler,
		},
		{
			MethodName: "GetListOfCashe",
			Handler:    _CashService_GetListOfCashe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto_files/cash/cash.proto",
}
