// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package expenditure

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExpenditureServiceClient is the client API for ExpenditureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExpenditureServiceClient interface {
	PostNewExpenditure(ctx context.Context, in *PostExpenditure, opts ...grpc.CallOption) (*PostExpenditure, error)
	GetListOfExpenditure(ctx context.Context, in *Identificator, opts ...grpc.CallOption) (*ListOfExpenditure, error)
}

type expenditureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExpenditureServiceClient(cc grpc.ClientConnInterface) ExpenditureServiceClient {
	return &expenditureServiceClient{cc}
}

func (c *expenditureServiceClient) PostNewExpenditure(ctx context.Context, in *PostExpenditure, opts ...grpc.CallOption) (*PostExpenditure, error) {
	out := new(PostExpenditure)
	err := c.cc.Invoke(ctx, "/expenditure.ExpenditureService/PostNewExpenditure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expenditureServiceClient) GetListOfExpenditure(ctx context.Context, in *Identificator, opts ...grpc.CallOption) (*ListOfExpenditure, error) {
	out := new(ListOfExpenditure)
	err := c.cc.Invoke(ctx, "/expenditure.ExpenditureService/GetListOfExpenditure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExpenditureServiceServer is the server API for ExpenditureService service.
// All implementations must embed UnimplementedExpenditureServiceServer
// for forward compatibility
type ExpenditureServiceServer interface {
	PostNewExpenditure(context.Context, *PostExpenditure) (*PostExpenditure, error)
	GetListOfExpenditure(context.Context, *Identificator) (*ListOfExpenditure, error)
	mustEmbedUnimplementedExpenditureServiceServer()
}

// UnimplementedExpenditureServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExpenditureServiceServer struct {
}

func (UnimplementedExpenditureServiceServer) PostNewExpenditure(context.Context, *PostExpenditure) (*PostExpenditure, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostNewExpenditure not implemented")
}
func (UnimplementedExpenditureServiceServer) GetListOfExpenditure(context.Context, *Identificator) (*ListOfExpenditure, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListOfExpenditure not implemented")
}
func (UnimplementedExpenditureServiceServer) mustEmbedUnimplementedExpenditureServiceServer() {}

// UnsafeExpenditureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExpenditureServiceServer will
// result in compilation errors.
type UnsafeExpenditureServiceServer interface {
	mustEmbedUnimplementedExpenditureServiceServer()
}

func RegisterExpenditureServiceServer(s grpc.ServiceRegistrar, srv ExpenditureServiceServer) {
	s.RegisterService(&ExpenditureService_ServiceDesc, srv)
}

func _ExpenditureService_PostNewExpenditure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostExpenditure)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenditureServiceServer).PostNewExpenditure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expenditure.ExpenditureService/PostNewExpenditure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenditureServiceServer).PostNewExpenditure(ctx, req.(*PostExpenditure))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpenditureService_GetListOfExpenditure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identificator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenditureServiceServer).GetListOfExpenditure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expenditure.ExpenditureService/GetListOfExpenditure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenditureServiceServer).GetListOfExpenditure(ctx, req.(*Identificator))
	}
	return interceptor(ctx, in, info, handler)
}

// ExpenditureService_ServiceDesc is the grpc.ServiceDesc for ExpenditureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExpenditureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "expenditure.ExpenditureService",
	HandlerType: (*ExpenditureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostNewExpenditure",
			Handler:    _ExpenditureService_PostNewExpenditure_Handler,
		},
		{
			MethodName: "GetListOfExpenditure",
			Handler:    _ExpenditureService_GetListOfExpenditure_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto_files/expenditure/expenditure.proto",
}
